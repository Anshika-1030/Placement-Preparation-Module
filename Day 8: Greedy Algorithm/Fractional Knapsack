class Solution
{
    public:
    //Function to get the maximum total value in the knapsack.
   static bool compare(pair<double, int> a, pair<double, int> b)
    {
        if(a.first == b.first)
        {
            return a.second > b.second;
        }
        return a.first > b.first;
    }
    
    double fractionalKnapsack(int w, Item arr[], int n)
    {
        vector<pair<double, int>> ppk;//price per kg
        
        for(int i = 0; i < n; i++)
        {
            double x = (double)arr[i].value / (double)arr[i].weight;
            
            int y = arr[i].weight;
            
            ppk.push_back(make_pair(x, y));
        }
        
        sort(ppk.begin(), ppk.end(), compare);
        
        int we = 0;
        
        double pro = 0;
        
        for(int i = 0; i < n; i++)
        {
            if(we + ppk[i].second <= w)
            {
                we = we + ppk[i].second;
                
                pro = pro + ppk[i].second * ppk[i].first;
            }
            else if(we + ppk[i].second > w)
            {
                int quant = w - we;
                
                pro = pro + quant * ppk[i].first;
                
                break;
            }
        }
        return pro;
    }
        
};
